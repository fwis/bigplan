// Get the canvas element
var canvas = document.getElementById("renderCanvas");

// Generate the BABYLON 3D engine
var engine = new BABYLON.Engine(canvas, true);

var worms = []; // Array to store multiple worm instances

var createScene = function () {
    var scene = new BABYLON.Scene(engine);

    // Add a camera to the scene and attach it to the canvas
    var camera = new BABYLON.ArcRotateCamera("camera", Math.PI / 2, Math.PI / 3, 100, new BABYLON.Vector3(0, 0, 0), scene); // Changed radius from 20 to 100
    camera.attachControl(canvas, true);

    // Add a directional light to simulate the sun
    var sun = new BABYLON.DirectionalLight("sun", new BABYLON.Vector3(-1, -2, -1), scene);
    sun.position = new BABYLON.Vector3(20, 40, 20);
    sun.intensity = 1.0;
    var light1 = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
    light1.intensity = 0.6;

    // Create a ground plane
    var ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 1000, height: 1000}, scene);
    var groundMaterial = new BABYLON.StandardMaterial("groundMaterial", scene);
    groundMaterial.diffuseTexture = new BABYLON.Texture("https://www.babylonjs-playground.com/textures/grass.png", scene);
    groundMaterial.diffuseTexture.uScale = 50; // Repeat 50 times on the x axis
    groundMaterial.diffuseTexture.vScale = 50; // Repeat 50 times on the y axis
    ground.material = groundMaterial;

    // Create a skybox
    var skybox = BABYLON.MeshBuilder.CreateBox("skyBox", {size: 1000.0}, scene);
    var skyboxMaterial = new BABYLON.StandardMaterial("skyBoxMaterial", scene);
    skyboxMaterial.backFaceCulling = false;
    skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("https://www.babylonjs-playground.com/textures/skybox", scene);
    skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
    skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
    skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
    skybox.material = skyboxMaterial;

    // Import the worm model
    BABYLON.SceneLoader.ImportMesh("", "", "worm2.glb", scene, function (meshes, particleSystems, skeletons, animationGroups) {
        var worm = meshes[0];

        if (worm) {
            console.log("Worm model loaded");

            // Adjust the scale of the worm
            worm.scaling = new BABYLON.Vector3(5, 5, 5);

            // Position the worm on the plane
            worm.position = new BABYLON.Vector3(0, 0.5, 0);

            // Add the initial worm to the worms array
            worms.push(worm);

            console.log("Initial worm added:", worm);
        } else {
            console.error("Worm model not found");
        }
    });

    return scene;
};


// Call the createScene function
var scene = createScene();

// Register a render loop to repeatedly render the scene
engine.runRenderLoop(function () {
    scene.render();
});

// Watch for browser/canvas resize events
window.addEventListener("resize", function () {
    engine.resize();
});

// Function to add a worm instance
function addWormInstance() {
    var worm = worms[0];

    if (worm) {
        var newWorm = worm.clone("worm" + worms.length);
        newWorm.position = new BABYLON.Vector3(Math.random() * 1000 - 500, 0.5, Math.random() * 1000 - 500);
        worms.push(newWorm);
        console.log("New worm added", newWorm);
    } else {
        console.error("No worm to clone");
    }
}

// Function to move the worm
function moveWorm(direction) {
    worms.forEach(function(worm) {
        var moveVector;
        switch (direction) {
            case "forward":
                moveVector = new BABYLON.Vector3(0, 0, 1);
                break;
            case "backward":
                moveVector = new BABYLON.Vector3(0, 0, -1);
                break;
            case "left":
                moveVector = new BABYLON.Vector3(-1, 0, 0);
                break;
            case "right":
                moveVector = new BABYLON.Vector3(1, 0, 0);
                break;
        }

        var speed = 0.2;
        worm.position.addInPlace(moveVector.scale(speed));
    });
}

// Control buttons
document.getElementById("moveForward").addEventListener("click", function() {
    moveWorm("forward");
    console.log("Moved forward");
});

document.getElementById("moveBackward").addEventListener("click", function() {
    moveWorm("backward");
    console.log("Moved backward");
});

document.getElementById("moveLeft").addEventListener("click", function() {
    moveWorm("left");
    console.log("Moved left");
});

document.getElementById("moveRight").addEventListener("click", function() {
    moveWorm("right");
    console.log("Moved right");
});

document.getElementById("addWorm").addEventListener("click", function() {
    if (worms.length > 0) {
        console.log("Adding new worm");
        addWormInstance();
    } else {
        console.error("No worm to clone");
    }
});

document.getElementById("addMultipleWorms").addEventListener("click", function() {
    var count = parseInt(document.getElementById("wormCount").value);
    if (isNaN(count) || count <= 0) {
        console.error("Invalid worm count");
        return;
    }
    if (worms.length > 0) {
        console.log("Adding multiple worms");
        for (var i = 0; i < count; i++) {
            addWormInstance();
        }
    } else {
        console.error("No worm to clone");
    }
});






<!DOCTYPE html>
<html>
<head>
    <title>Babylon.js Worm</title>
    <style>
        html, body {
            width: 100%;
            height: 100%;
            margin: 0;
            overflow: hidden;
        }
        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
        #controlPanel {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
        }
        #controlPanel button, #controlPanel input {
            display: block;
            margin: 5px 0;
        }
    </style>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylon.glTF2FileLoader.js"></script>
</head>
<body>
    <canvas id="renderCanvas"></canvas>
    <div id="controlPanel">
        <button id="moveForward">前进</button>
        <button id="moveBackward">后退</button>
        <button id="moveLeft">左移</button>
        <button id="moveRight">右移</button>
        <button id="addWorm">添加虫子</button>
        <input type="number" id="wormCount" placeholder="输入虫子数量" />
        <button id="addMultipleWorms">添加任意只虫子</button>
    </div>
    <script src="app.js"></script>
</body>
</html>
